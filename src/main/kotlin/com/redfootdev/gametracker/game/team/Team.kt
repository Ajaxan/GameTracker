package com.redfootdev.gametracker.game

import org.bukkit.entity.Player
import org.bukkit.inventory.meta.ArmorMeta
import org.bukkit.inventory.meta.trim.ArmorTrim
import org.bukkit.inventory.meta.trim.TrimMaterial
import org.bukkit.inventory.meta.trim.TrimPattern

// Documentation Disclaimer - KDocs Generated by ChatGPT

/**
 * Represents a team in a game with various properties and functions.
 *
 * @property name The name of the team.
 * @property color The color of the team, represented by a [TrimMaterial] (nullable).
 * @property pattern The pattern of the team's color, represented by a [TrimPattern] (nullable).
 * @property colorVisible A flag indicating whether the team's color is visible.
 * @property friendlyFire A flag indicating whether friendly fire is allowed within the team.
 * @property players The list of [GamePlayer] objects that belong to this team.
 */
class Team(
    val name: String,
    val color: TrimMaterial? = null,
    val pattern: TrimPattern? = null,
    val colorVisible: Boolean = false,
    val friendlyFire: Boolean = false,
    val players: ArrayList<GamePlayer> = arrayListOf()
) {

    /**
     * Creates a team of one for this [Player]
     */
    constructor(player: Player) : this(player.name) {}

    /**
     * Adds a [GamePlayer] to the list of players in the team.
     *
     * @param gamePlayer The [GamePlayer] object to be added to the team's list of players.
     */
    fun addPlayer(gamePlayer: GamePlayer) {
        players.add(gamePlayer)
        if (colorVisible) applyColor(listOf(gamePlayer))
    }

    /**
     * Removes a [GamePlayer] from the list of players in the team.
     *
     * @param gamePlayer The [GamePlayer] object to be removed from the team's list of players.
     */
    fun removePlayer(gamePlayer: GamePlayer) {
        players.remove(gamePlayer)
        removeColor(listOf(gamePlayer))
    }

    /**
     * Applies the team's color and pattern to all players on the team.
     */
    fun applyColorAll() {
        applyColor(players)
    }

    /**
     * Removes the team's color and pattern from all players on the team.
     */
    fun removeColorAll() {
        removeColor(players)
    }

    /**
     * Applies the team's color and pattern to a list of [GamePlayer] objects.
     *
     * @param gamePlayers The list of [GamePlayer] objects to apply the color to.
     */
    fun applyColor(gamePlayers: List<GamePlayer>) {
        if (color == null || pattern == null) return
        gamePlayers.forEach { gamePlayer ->
            val player = gamePlayer.player
            setArmorTrim(player, ArmorTrim(color, pattern))
        }
    }

    /**
     * Removes the team's color and pattern from a list of [GamePlayer] objects.
     *
     * @param gamePlayers The list of [GamePlayer] objects to remove the color from.
     */
    fun removeColor(gamePlayers: List<GamePlayer>) {
        if (color == null || pattern == null) return
        gamePlayers.forEach { gamePlayer ->
            val player = gamePlayer.player
            setArmorTrim(player, null)
        }
    }

    /**
     * Sets the armor trim for a player's armor items.
     *
     * @param player The player whose armor items need their trim set.
     * @param trim The [ArmorTrim] object representing the trim to be applied, or null to remove trim.
     */
    private fun setArmorTrim(player: Player, trim: ArmorTrim?) {
        player.inventory.armorContents.forEach { armor ->
            if (armor?.itemMeta is ArmorMeta) {
                val armorMeta = armor.itemMeta as ArmorMeta
                armorMeta.trim = trim
            }
        }
    }
}